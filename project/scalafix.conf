# don't forget to run scalafixAutoSuppressLinterErrors when adding a new rule

rules = [
#  Disable
  DisableSyntax
  ExplicitResultTypes
  LeakingImplicitClassVal
  MissingFinal
  RemoveUnusedImports
  RemoveUnusedTerms
]

Disable.symbols = [
  {
    regex = "scala.collection.mutable.*"
    message = "prefer Java collections, if you must mutate"
  }
  {
    regex = [
      "java.io.*"
      "scala.io.*"
    ]
    message = "legacy blocking API, prefer java.nio"
  }

  {
    # not fully implemented: https://github.com/scalacenter/scalafix/pull/634
    regex = {
      includes = [
        "java[.]lang[.]Object.*"
        "scala[.]Any.*"
        ".*#equals\\(Any\\)[.]"
        ".*#toString\\(\\)[.]" # doesn't catch string interpolators...
      ]
    }
    message = "prefer scalaz typeclasses Equal, Show, Liskov, etc"
  }

  "scalaz.effect.IO.unsafePerformIO"

  "scala.Enumeration"

  # needs appropriate warning about totality
  "scala.util.Either.LeftProjection.get"
  "scala.util.Either.RightProjection.get"
  "scala.util.Try.get"
  "scala.Option.get"
]

Disable.ifSynthetic = [
  "java.io.Serializable"
  "scala.Any"
  "scala.Any.asInstanceOf"
  "scala.Any.isInstanceOf"
  "scala.AnyRef"
  "scala.AnyVal"
  # "scala.Nothing"
  "scala.Option.option2Iterable"
  "scala.Predef.any2stringadd"
  "scala.Product"
]

Disable.unlessInside = [
  {
    # https://github.com/scalacenter/scalafix/issues/649
    #safeBlock = "scalaz.effect.IO.apply"
    safeBlock = "fommil.std.IO"
    symbols = [
      {
        regex = {
          includes = [
            "scala.Predef.println"
            "java.lang.System.currentTimeMillis"
            "java.nio.*"
          ]
        }
        message = "IO must be performed safely"
      }
      {
        regex = {
          includes = [
            "java.*"
          ]
          excludes = [
            "fommil.*"
            "scalaz.*"
            "java.lang.String#"
            "java.time.Instant#"
            "java.net.URI#"

            # primitives are not supported: https://github.com/scalameta/scalameta/issues/1488

            # WORKAROUND https://github.com/scalacenter/scalafix/issues/680
            "java"
          ]
        }
        message = "Untrusted code, wrap with IO or add to the excludes list in scalafix.conf"
      }
    ]
  }
  {
    safeBlock = "scalaz.Maybe.attempt"
    symbols = [
      {
        regex = {
          includes = [
          ]
          excludes = [
          ]
        }
        message = "Untrusted stdlib call, wrap with IO or add to the excludes list in scalafix.conf"
      }
    ]
  }
]

DisableSyntax.keywords = [
  var
  null
  return
  throw
  while
]
DisableSyntax.noSemicolons = true
DisableSyntax.noXml = true
DisableSyntax.noCovariantTypes = true
DisableSyntax.noContravariantTypes = true
DisableSyntax.noValInAbstract = true
DisableSyntax.noImplicitObject = true
DisableSyntax.noImplicitConversion = true

ExplicitResultTypes {
  unsafeShortenNames = true

  # these apply to non-implicits
  memberKind = [Def, Val]
  # BLOCKED by https://github.com/scalacenter/scalafix/issues/674
  #memberVisibility = [Public, Protected]

  # turn to the max...
  skipSimpleDefinitions = false
  skipLocalImplicits = false
}
